#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="dbContabRisk")]
public partial class dbGeneralDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertRoles_FuncionesAplicacion(Roles_FuncionesAplicacion instance);
  partial void UpdateRoles_FuncionesAplicacion(Roles_FuncionesAplicacion instance);
  partial void DeleteRoles_FuncionesAplicacion(Roles_FuncionesAplicacion instance);
  #endregion
	
	public dbGeneralDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["dbContabConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public dbGeneralDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public dbGeneralDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public dbGeneralDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public dbGeneralDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Roles_FuncionesAplicacion> Roles_FuncionesAplicacions
	{
		get
		{
			return this.GetTable<Roles_FuncionesAplicacion>();
		}
	}
}

[Table(Name="dbo.Roles_FuncionesAplicacion")]
public partial class Roles_FuncionesAplicacion : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _RoleName;
	
	private string _FunctionName;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnFunctionNameChanging(string value);
    partial void OnFunctionNameChanged();
    #endregion
	
	public Roles_FuncionesAplicacion()
	{
		OnCreated();
	}
	
	[Column(Storage="_RoleName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string RoleName
	{
		get
		{
			return this._RoleName;
		}
		set
		{
			if ((this._RoleName != value))
			{
				this.OnRoleNameChanging(value);
				this.SendPropertyChanging();
				this._RoleName = value;
				this.SendPropertyChanged("RoleName");
				this.OnRoleNameChanged();
			}
		}
	}
	
	[Column(Storage="_FunctionName", DbType="NVarChar(250) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string FunctionName
	{
		get
		{
			return this._FunctionName;
		}
		set
		{
			if ((this._FunctionName != value))
			{
				this.OnFunctionNameChanging(value);
				this.SendPropertyChanging();
				this._FunctionName = value;
				this.SendPropertyChanged("FunctionName");
				this.OnFunctionNameChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
